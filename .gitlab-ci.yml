stages:
    - test
    - build
    - deploy

cache:
    paths:
        - node_modules/

lint:
    stage: test
    image: node:16-alpine3.14
    only:
        refs:
            - merge_requests
        variables:
            - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
    script:
        - npm install
        - npm run prettier && npm run lint

develop:
    stage: deploy
    needs: []
    only:
        - develop
    image: node:16.14.2
    allow_failure: false
    before_script:
        - apt-get update && apt-get install -y openssh-client && apt-get install -y rsync
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | ssh-add -
        - mkdir -p ~/.ssh
        - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts
        - chmod 600 ~/.ssh/known_hosts
    script:
        - git pull origin develop
        - npm install
        - docker-compose -f docker-compose-test.yml up -d --build

build-staging:
    stage: build
    needs: []
    only:
        - staging
    image: docker:20.10.12
    allow_failure: false
    services:
        - docker:20.10.12-dind
    variables:
        DOCKER_TLS_CERTDIR: ""
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - rm -rf build && rm -rf .env && rm -rf .env.example
        - echo "$STAGING_ENV" > .env
        - echo "$STAGING_ENV" > .env.example
        - docker build -f Dockerfile.deploy -t $CI_REGISTRY_IMAGE:latest .
        - docker push $CI_REGISTRY_IMAGE:latest

staging:
    stage: deploy
    needs:
        - build-staging
    only:
        - staging
    image: docker:20.10.12
    allow_failure: false
    services:
        - docker:20.10.12-dind
    variables:
        DOCKER_TLS_CERTDIR: ""
        GIT_STRATEGY: none
    before_script:
        - which ssh-agent
        - eval $(ssh-agent -s)
        - echo "$SSH_STAGING_PRIVATE_KEY" | ssh-add -
        - mkdir -p ~/.ssh
        - ssh-keyscan -H $SSH_STAGING_SERVER_IP >> ~/.ssh/known_hosts
        - chmod 600 ~/.ssh/known_hosts
    script:
        - >
            ssh $SSH_STAGING_SERVER_USER@$SSH_STAGING_SERVER_IP
            "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};
            cd ${PATH_TO_STAGING_PROJECT};
            docker-compose pull frontend;
            docker-compose up -d --no-deps frontend;"

staging-internal:
    stage: deploy
    needs: []
    only:
        - staging
    image: node:14.17.3
    allow_failure: false
    before_script:
        - apt-get update && apt-get install -y openssh-client && apt-get install -y rsync
        - eval $(ssh-agent -s)
        - echo "$SSH_STAGING_PRIVATE_KEY" | ssh-add -
        - mkdir -p ~/.ssh
        - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts
        - chmod 600 ~/.ssh/known_hosts
    script:
        - rm -rf build && rm -rf .env && rm -rf .env.example
        - echo "$STAGING_INTERNAL_ENV" > .env
        - echo "$STAGING_INTERNAL_ENV" > .env.example
        - npm install -g npm@latest
        - npm install
        - npm run build
        - rsync -avzhe ssh ./build $SSH_SERVER_USER@$SSH_SERVER_IP:$PATH_TO_STAGING_INTERNAL_PROJECT
